load(":rabbitmq_home.bzl", "rabbitmq_home")
load(":rabbitmq_run.bzl", "rabbitmq_run", "rabbitmq_run_command")
load(":rabbitmqctl.bzl", "rabbitmqctl")
load(":rabbitmq.bzl", "REQUIRED_PLUGINS")

platform(
    name = "erlang_22.3_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        "@bazel_tools//tools/cpp:clang",
    ],
    exec_properties = {
        "OSFamily": "Linux",
        "container-image": "docker://elixir:1.10",
    },
)

platform(
    name = "erlang_23.1_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        "@bazel_tools//tools/cpp:clang",
    ],
    exec_properties = {
        "OSFamily": "Linux",
        "container-image": "docker://elixir:1.11",
    },
)

rabbitmq_home(
    name = "broker-home",
    escripts = ["//deps/rabbitmq_cli:rabbitmqctl"],
    plugins = REQUIRED_PLUGINS,
)

rabbitmq_home(
    name = "broker-management-home",
    escripts = ["//deps/rabbitmq_cli:rabbitmqctl"],
    plugins = REQUIRED_PLUGINS + [
        "//deps/rabbitmq_management:bazel_erlang_lib",
        "//deps/rabbitmq_management_agent:bazel_erlang_lib",
        "//deps/rabbitmq_web_dispatch:bazel_erlang_lib",
        "//deps/amqp_client:bazel_erlang_lib",
        "@cowboy//:bazel_erlang_lib",
        "@cowlib//:bazel_erlang_lib",
    ],
)

rabbitmq_home(
    name = "broker-for-tests-home",
    escripts = ["//deps/rabbitmq_cli:rabbitmqctl"],
    plugins = REQUIRED_PLUGINS + [
        # "@rabbitmq-ct-helpers//:bazel_erlang_lib",
        "@rabbitmq-ct-client-helpers//:bazel_erlang_lib",
        "//deps/amqp_client:bazel_erlang_lib",
    ],
)

rabbitmq_home(
    name = "broker-for-cli-tests-home",
    escripts = ["//deps/rabbitmq_cli:rabbitmqctl"],
    plugins = REQUIRED_PLUGINS + [
        "//deps/rabbitmq_federation:bazel_erlang_lib",
        "//deps/rabbitmq_stomp:bazel_erlang_lib",
        "//deps/amqp_client:bazel_erlang_lib",
    ],
)

rabbitmq_run(
    name = "rabbitmq-run",
    home = ":broker-home",
    visibility = ["//visibility:public"],
)

rabbitmq_run(
    name = "rabbitmq-management-run",
    home = ":broker-management-home",
    visibility = ["//visibility:public"],
)

rabbitmq_run(
    name = "rabbitmq-for-tests-run",
    home = ":broker-for-tests-home",
    visibility = ["//visibility:public"],
    testonly = True,
)

rabbitmq_run(
    name = "rabbitmq-for-cli-tests-run",
    home = ":broker-for-cli-tests-home",
    visibility = ["//visibility:public"],
    testonly = True,
)

# Allow us to `bazel run broker`
# for the equivalent of `make run-broker`
# (though it as of yet includes no plugins)
rabbitmq_run_command(
    name = "broker",
    rabbitmq_run = ":rabbitmq-run",
    subcommand = "run-broker",
)

# `bazel run broker-management` for the broker with just the
# management plugin
rabbitmq_run_command(
    name = "broker-management",
    rabbitmq_run = ":rabbitmq-management-run",
    subcommand = "run-broker",
)

# `bazel run rabbitmqctl`
rabbitmqctl(
    name = "rabbitmqctl",
    home = ":broker-home",
    visibility = ["//visibility:public"],
)
